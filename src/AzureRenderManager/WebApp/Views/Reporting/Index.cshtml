@using System.Linq;
@using System.Globalization;
@model WebApp.Controllers.ReportingController.IndexModel
@{
    ViewBag.Title = "Reporting";
}

@section Breadcrumb
{
    <a asp-controller="Reporting" asp-action="Index">Reporting</a>
}

<script src="~/js/Chart.bundle.min.js" asp-append-version="true"></script>
<script src="~/js/chartjs-plugin-colorschemes.min.js" asp-append-version="true"></script>

<div class="page-header">
    <h1>Reporting</h1>
    <p>Date range: <input type="date" id="fromInput" value="@Model.From.ToString("yyyy-MM-dd")" /> &ndash; <input type="date" id="toInput" value="@Model.To.ToString("yyyy-MM-dd")" /></p>

    <script>
        var fromInput = document.getElementById("fromInput");
        var toInput = document.getElementById("toInput");

        var go = () => document.location.search = "from=" + fromInput.value + "&to=" + toInput.value;

        fromInput.onchange = go;
        toInput.onchange = go;
    </script>

    <p>
        Jump to:
        @if (Model.PreviousMonthLink != null)
        {
            <a href="@Model.PreviousMonthLink">Previous Month</a>
            <span>&bull;</span>
        }

        <a href="@Model.CurrentMonthLink">Current Month</a>

        @if (Model.NextMonthLink != null)
        {
            <span>&bull;</span>
            <a href="@Model.NextMonthLink">Next Month</a>
        }
    </p>
    <br />

    @foreach (var kvp in Model.UsagePerEnvironment)
    {
        var envName = kvp.Key;
        var data = kvp.Value;

        <h2>@envName</h2>
        <h3 id="env-cost-@envName"></h3>
        @if (data.Properties == null)
        {
            <p>Cost management is not supported for this environment.</p>

            continue;
        }

        @if (!data.Properties.Rows.Any())
        {
            <p>No cost data is available for this period.</p>

            continue;
        }

        var id = Guid.NewGuid().ToString();
        var cols = data.Properties.Columns;
        var dateIndex = cols.FindIndex(col => col.Name == "UsageDate");
        var costIndex = cols.FindIndex(col => col.Name == "PreTaxCost");
        var currencyIndex = cols.FindIndex(col => col.Name == "Currency");
        var meterCategoryIndex = cols.FindIndex(col => col.Name == "MeterSubCategory");
        var currency = (string)data.Properties.Rows.First()[currencyIndex]; // assumption: all values have same currency
        var totalCostForEnv = 0d;

        <canvas id="graph-@id"></canvas>

        <script type="text/javascript">
            var ctx = document.getElementById("graph-@id").getContext('2d');
            ctx.canvas.width = 800;
            ctx.canvas.height = 400;

            var datasets = [
                @foreach (var meterCategory in data.Properties.Rows.GroupBy(row => (string)row[meterCategoryIndex]))
                {
                    var category = string.IsNullOrWhiteSpace(meterCategory.Key) ? "uncategorized" : meterCategory.Key;

                    IEnumerable<double> GetData()
                    {
                        var currentDay = Model.From;
                        foreach (var day in meterCategory.OrderBy(x => x[dateIndex]))
                        {
                            // we have to pad the data with zeroes because ChartJS can't handle it otherwise
                            var dataDay = DateTimeOffset.ParseExact(((long)day[dateIndex]).ToString(CultureInfo.InvariantCulture), "yyyyMMdd", CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal);
                            currentDay = currentDay.AddDays(1);
                            while (currentDay < dataDay)
                            {
                                yield return 0;
                                currentDay = currentDay.AddDays(1);
                            }

                            yield return (double)day[costIndex];
                        }

                        // we have to pad the data with zeroes because ChartJS can't handle it otherwise
                        currentDay = currentDay.AddDays(1);
                        while (currentDay <= Model.To)
                        {
                            yield return 0;
                            currentDay = currentDay.AddDays(1);
                        }
                    };

                    var d = GetData().ToList();
                    totalCostForEnv += d.Sum();

                    <text>{ label: '@category', data: [@string.Join(", ", d)] }, </text>
                } ];

            // Update the env costs
            $('#env-cost-' + '@envName').html('@totalCostForEnv.ToString("C2") - Cost for period');

            var cfg = {
                type: 'bar',
                data: {
                    labels: [
                        @for (var day = Model.From; day <= Model.To; day = day.AddDays(1))
                        {
                            <text>"@day.ToString("yyyyMMdd")",</text>
                        }
                    ],
                    datasets: datasets
                },
                options: {
                    scales: {
                        xAxes: [{
                            stacked: true,
                            type: 'time',
                            time: {
                                unit: 'day',
                                min: '@Model.From.ToString("yyyyMMdd")',
                                max: '@Model.To.ToString("yyyyMMdd")'
                            }
                        }],
                        yAxes: [{
                            stacked: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Cost (@currency)'
                            },
                            ticks: {
                                precision: 2,
                                beginAtZero: true
                            }
                        }]
                    },
                    plugins: {
                        colorschemes: {
                            scheme: 'brewer.Paired12'
                        }
                    }
                }
            };

            var chart = new Chart(ctx, cfg);
        </script>
        <br />
        <br />
        <br />
    }
</div>

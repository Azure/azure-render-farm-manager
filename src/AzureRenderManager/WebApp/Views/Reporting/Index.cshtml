@using System.Linq;
@using WebApp.Models.Reporting;
@model WebApp.Models.Reporting.IndexModel
@{
    ViewBag.Title = "Reporting";
}

@section Breadcrumb
{
    <a asp-controller="Reporting" asp-action="Index">Reporting</a>
}

<script src="~/js/Chart.bundle.min.js" asp-append-version="true"></script>
<script src="~/js/chartjs-plugin-colorschemes.min.js" asp-append-version="true"></script>

<div class="page-header">
    <h1>Reporting</h1>
    <p>Date range: <input type="date" id="fromInput" value="@Model.From.ToString("yyyy-MM-dd")"/> &ndash; <input type="date" id="toInput" value="@Model.To.ToString("yyyy-MM-dd")"/></p>

    <script>
        var fromInput = document.getElementById("fromInput");
        var toInput = document.getElementById("toInput");

        var go = () => document.location.search = "from=" + fromInput.value + "&to=" + toInput.value;

        fromInput.onchange = go;
        toInput.onchange = go;
    </script>

    <p>
        Jump to:
        @if (Model.PreviousMonthLink != null)
        {
            <a href="@Model.PreviousMonthLink">Previous Month</a>
            <span>&bull;</span>
        }

        <a href="@Model.CurrentMonthLink">Current Month</a>

        @if (Model.NextMonthLink != null)
        {
            <span>&bull;</span>
            <a href="@Model.NextMonthLink">Next Month</a>
        }
    </p>

    @foreach (var envUsage in new[] { new EnvironmentUsage("Total Costs", Model.SummaryUsage) }.Concat(Model.UsagePerEnvironment))
    {
        @if (envUsage.Usage == null)
        {
            <h2>@envUsage.EnvironmentId</h2>
            <p>Cost management is not supported for this environment.</p>

            continue;
        }

        @if (!envUsage.Usage.Categorized.Any())
        {
            <h2>@envUsage.EnvironmentId</h2>
            <p>No cost data is available for this period.</p>

            continue;
        }

        <h2>@envUsage.EnvironmentId (@envUsage.Usage.Total.ToString("F2") @envUsage.Usage.Currency)</h2>

        var id = Guid.NewGuid().ToString();
        var usage = envUsage.Usage;
        var period = usage.Period;

        <div class="chart-container" style="width: 100%">
            <canvas id="graph-@id"></canvas>
        </div>

        <script type="text/javascript">
            var ctx = document.getElementById("graph-@id").getContext('2d');

            var datasets = [
            @foreach (var category in usage.Categorized)
            {
                <text>{ label: '@category.Key', data: [@string.Join(", ", category.Value.Select(x => x.Value))] }, </text>
            } ];

            var cfg = {
                type: 'bar',
                data: {
                    labels: [
                        @for (var day = period.From; day <= period.To; day = day.AddDays(1))
                        {
                            <text>"@day.ToString("yyyyMMdd")",</text>
                        }
                    ],
                    datasets: datasets
                },
                options: {
                    legend: {
                        position: 'bottom'
                    },
                    scales: {
                        xAxes: [{
                            stacked: true,
                            type: 'time',
                            time: {
                                unit: 'day',
                                min: '@period.From.ToString("yyyyMMdd")',
                                max: '@period.To.ToString("yyyyMMdd")'
                            }
                        }],
                        yAxes: [{
                            stacked: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Cost (@envUsage.Usage.Currency)'
                            },
                            ticks: {
                                precision: 2,
                                beginAtZero: true
                            }
                        }]
                    },
                    plugins: {
                        colorschemes: {
                            scheme: 'brewer.Paired12'
                        }
                    }
                }
            };

            var chart = new Chart(ctx, cfg);
        </script>
    }
</div>

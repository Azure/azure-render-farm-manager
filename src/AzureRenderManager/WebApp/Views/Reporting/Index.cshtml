@using Newtonsoft.Json;
@using System.Linq;
@model WebApp.Controllers.ReportingController.IndexModel
@{
    ViewBag.Title = "Reporting";
}

@section Breadcrumb
{
    <a asp-controller="Reporting" asp-action="Index">Reporting</a>
}

<script src="~/js/Chart.bundle.min.js" asp-append-version="true"></script>

<div class="page-header">
    <h1>Reporting</h1>

    @if(Model.PreviousMonthLink != null)
    {
        <a href="@Model.PreviousMonthLink">Previous Month</a>

        if (Model.NextMonthLink != null)
        {
            <span>&bull;</span>
        }
    }

    @if(Model.NextMonthLink != null)
    {
        <a href="@Model.NextMonthLink">Next Month</a>
    }

    @foreach (var kvp in Model.UsagePerEnvironment)
    {
        var envName = kvp.Key;
        var data = kvp.Value;

        <h2>@envName</h2>
        @if (data.Properties == null)
        {
            <p>Cost management is not yet supported for this environment.</p>

            continue;
        }

        @if (!data.Properties.Rows.Any())
        {
            <p>No cost data is available for this month.</p>

            continue;
        }

        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Item</th>
                    <th>Cost</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var cols = data.Properties.Columns;
                    var dateIndex = cols.FindIndex(col => col.Name == "UsageDate");
                    var costIndex = cols.FindIndex(col => col.Name == "PreTaxCost");
                    var currencyIndex = cols.FindIndex(col => col.Name == "Currency");
                    var meterCategoryIndex = cols.FindIndex(col => col.Name == "MeterSubCategory");
                }

                @foreach (var day in data.Properties.Rows.GroupBy(row => row[dateIndex]).OrderBy(g => g.Key))
                {
                    string FormatCost(IReadOnlyList<object> row)
                        => string.Format("{0:0.00} {1}", row[costIndex], row[currencyIndex]);

                    string FormatItem(IReadOnlyList<object> row)
                        => row[meterCategoryIndex].ToString();

                    // Render the first item with the header
                    <tr>
                        <th rowspan="@day.Count()" scope="row">
                            @day.Key
                        </th>
                        <td>@FormatItem(day.First())</td>
                        <td>@FormatCost(day.First())</td>
                    </tr>

                    // Render the rest without
                    @foreach (var item in day.Skip(1))
                    { 
                        <tr>
                            <td>@FormatItem(item)</td>
                            <td>@FormatCost(item)</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
</div>

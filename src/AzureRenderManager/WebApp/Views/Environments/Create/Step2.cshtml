@model WebApp.Models.Environments.Create.AddEnvironmentStep2Model;
@{
    ViewBag.Title = "Add Environment";
}

@section Breadcrumb
    {
    <a asp-controller="Environments" asp-action="Index">Environments</a> &gt;
    <span>New</span>
}

@await Html.PartialAsync("Environments/Create/CreateFormHeaderPartial")
@using (Html.BeginForm("Step2", "Environments", new { envId = Model.EnvironmentName }, FormMethod.Post, true, new { id = "myForm" }))
{
    @await Html.PartialAsync("Menu/EnvironmentSubMenu", Model, new ViewDataDictionary(ViewData)
    {
        { "Step", 3 },
        { "Wizard", "true" }
    })

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.EnvironmentName)
    @Html.HiddenFor(model => model.SubscriptionId)
    @Html.HiddenFor(model => model.LocationName)

    <!--
        TODO: set any pre-selections
        If we come back to this page, we need to default to showing what has already been selected in the
        currently saved environment. At the moment it just defaults to the first one, not the one that is
        set in the model.
    -->

    <div asp-validation-summary="ModelOnly" class=""></div>
    <div class="form-section">
        <div class="section-title">
            <span class="step-index">2</span>
            <div class="step-header">
                <h3>Azure Connection</h3>
                <p>
                    Select the required Batch account, Storage account, VNet and Application Insights for the
                    environment. For any of these you can create new ones should you wish.
                </p>
            </div>
        </div>
        <div class="section-wrapper">
            <div class="section-bar"></div>
            <div class="section-content">
                <div class="form-element">
                    <input id="DeleteResource" asp-for="AzureConnectionType" type="radio" value="true" />
                    <label asp-for="AzureConnectionType">No connection (Azure-only deployment)</label>

                    <input id="DeleteResource" asp-for="AzureConnectionType" type="radio" value="true" />
                    <label asp-for="AzureConnectionType">No connection (Azure-only deployment)</label>

                    <input id="DeleteResource" asp-for="AzureConnectionType" type="radio" value="true" />
                    <label asp-for="AzureConnectionType">No connection (Azure-only deployment)</label>
                </div>



                <div class="form-element">
                    <label asp-for="SubnetResourceIdLocationAndAddressPrefix">Virtual Network and Subnet</label>
                    <div id="SubnetSpinner">
                        <div class="async-select">
                            <select id="Subnets" asp-for="SubnetResourceIdLocationAndAddressPrefix">
                                <option disabled selected> -- Loading Subnets -- </option>
                            </select>
                            <i class="fa fa-spinner fa-spin"></i>
                        </div>
                        <span asp-validation-for="SubnetResourceIdLocationAndAddressPrefix" class=""></span>
                        <span id="Subnets-none" class="field-validation-error"></span>
                    </div>
                    <div id="vNet" class="newResource" style="display: none;">
                        <input asp-for="VNetSettings.VNetName" value="@Model.VNetSettings.VNetName" placeholder="New Virtual Network name" />
                        <span asp-validation-for="VNetSettings.VNetName" class=""></span>
                    </div>
                    <small>Virtual Machines will be deployed to this Subnet ensuring they have access to any cloud or on-premise storage. Ensure that the subnet has sufficient IP addresses for the number of virtual machines you plan to run.</small>
                    <a id="newVNet" href="javascript:void(0);" onclick="showHideNew('vNet', 'NewVnetName', 'SubnetSpinner', this);">Create new virtual network</a>
                </div>
                </div>
            </div>
    </div>
    <div class="form-footer">
        <div class="summary"></div>
        <div class="button-bar">
            <a id="previous" class="button" asp-controller="Environments" asp-action="Step1" asp-route-envId="@Model.EnvironmentName">Previous</a>
            <button id="next" type="submit">Next : Identity <i id="nextSpinner" class="fa fa-spinner fa-spin" style="display: none;"></i></button>
        </div>
    </div>
}

@section scripts
    {
    <script>
        function showHideNew(createDiv, createInput, selectDiv, anchorLink) {
            if ($(`#${createDiv}`).is(":visible")) {
                showSelectInput(createDiv, createInput, selectDiv, anchorLink);
            } else {
                showCreateInput(createDiv, createInput, selectDiv, anchorLink);
            }
        }

        function showSelectInput(createDiv, createInput, selectDiv, anchorLink) {
            const inputBox = $(`#${createInput}`);
            inputBox.val(null);
            inputBox.prop("disabled", "disabled");
            $(`#${selectDiv}`).show();
            setLinkText(anchorLink, createDiv, true);
            $(`#${createDiv}`).hide();
        }

        function showCreateInput(createDiv, createInput, selectDiv, anchorLink) {
            const inputBox = $(`#${createInput}`);
            $(`#${selectDiv}`).hide();
            inputBox.prop("disabled", false);
            setLinkText(anchorLink, createDiv, false);
            if (inputBox.val() === null || inputBox.val().trim() === "") {
                const envName = "@Model.EnvironmentName";
                switch (createDiv) {
                case "resourceGroup":
                    inputBox.val(`${envName}-rg`);
                    break;
                case "keyVault":
                    inputBox.val(`${envName.replace(/[&\/\\_-]/g, "").substring(0, 21)}-kv`);
                    break;
                case "batchAcc":
                    inputBox.val(`${envName.toLowerCase().replace(/[&\/\\_-]/g, "").substring(0, 21)}ba`);
                    break;
                case "storageAcc":
                    inputBox.val(`${envName.toLowerCase().replace(/[&\/\\_-]/g, "").substring(0, 21)}sa`);
                    break;
                case "vNet":
                    inputBox.val(`${envName.toLowerCase()}-vnet`);
                    break;
                case "appInsights":
                    inputBox.val(`${envName.toLowerCase()}-ai`);
                    break;
                }
            }

            $(`#${createDiv}`).show();
        }

        function setLinkText(anchorLink, createDiv, creating) {
            const prefix = creating ? "Create new" : "Select existing";
            switch (createDiv) {
                case "resourceGroup":
                    $(anchorLink).text(`${prefix} resource group`);
                    break;
                case "keyVault":
                    $(anchorLink).text(`${prefix} Key Vault`);
                    break;
                case "batchAcc":
                    $(anchorLink).text(`${prefix} Batch account`);
                    break;
                case "storageAcc":
                    $(anchorLink).text(`${prefix} storage account`);
                    break;
                case "vNet":
                    $(anchorLink).text(`${prefix} virtual network`);
                    break;
                case "appInsights":
                    $(anchorLink).text(`${prefix} Application Insights`);
                    break;
            }
        }

        function loadSubnets(subscriptionId, location) {
            $("#SubnetSpinner").addClass("loading");
            $("#Subnets-none").hide();

            $.get(`/api/subscriptions/${subscriptionId}/subnets/${location}`,
                function (subnets) {
                    var activeCount = 0;
                    var dropDownItems = $.map(subnets,
                        function (subnet) {
                            activeCount++;
                            return `<option value="${subnet.id};${subnet.location};${subnet.addressPrefix}">${subnet.vNetName} - ${subnet.location} - ${subnet.name} (${subnet.addressPrefix})</option>`;
                        }
                    );

                    setAvailabilityError(activeCount, "Subnets-none", `Subnets in '${location}'`, () => {
                        if (activeCount > 0) {
                            setInitialState("@Model.VNetSettings.VNetName", "@Model.SubnetResourceIdLocationAndAddressPrefix", "vNet", "NewVnetName", "SubnetSpinner", $("#newVNet"));
                        } else {
                            showCreateInput("vNet", "NewVnetName", "SubnetSpinner", $("#newVNet"));
                        }
                    });

                    if (dropDownItems && dropDownItems.length > 0) {
                        dropDownItems.splice(0, 0, "<option value='#'>Select an existing Subnet or create a new one ...</option>");
                    } else {
                        dropDownItems = [
                            `<option disabled value='#'>No existing Subnets found in ${location}</option>`
                        ];
                    }

                    populateAndPreSelectDropDown(dropDownItems, "@Model.SubnetResourceIdLocationAndAddressPrefix", "Subnets", true);
                    $("#SubnetSpinner").removeClass("loading");
                });
        }

        function setAvailabilityError(numAvailable, spanId, message, setUiStateCallback) {
            if (numAvailable <= 0) {
                $(`#${spanId}`)
                    .text(`There are no available ${message}. You will need to create one.`)
                    .show();
            } else {
                $(`#${spanId}`).hide();
            }

            if (setUiStateCallback) {
                setUiStateCallback();
            }
        }

        function populateAndPreSelectDropDown(dropDownItems, valueFromModel, ddlName, hasActive) {
            $(`#${ddlName}`).empty().append(dropDownItems);
            if (hasActive) {

                const selectedValue = valueFromModel && valueFromModel.length > 0
                    ? valueFromModel
                    : $(`#${ddlName} option:first`).val();

                // only try and pre-select it if it exists in the list
                const found = $(`#${ddlName} option[value='${selectedValue}']`).val();
                if (found) {
                    $(`#${ddlName}`).val(selectedValue).change();
                }
            } else {
                $(`#${ddlName}`).attr("selectedIndex", 1).change();
            }
        }

        function setInitialState(newValue, existingValue, createDiv, createInput, selectDiv, anchorLink) {
            if (newValue) {
                showCreateInput(createDiv, createInput, selectDiv, anchorLink);
            } else {
                showSelectInput(createDiv, createInput, selectDiv, anchorLink);
            }
        }

        $(document).ready(function() {

            loadSubnets("@Model.SubscriptionId", "@Model.LocationName");

            if ('@Model.Error' !== '') {
                toastr.options.timeOut = 0;
                toastr.options.extendedTimeOut = 0;
                toastr.options.closeButton = true;
                toastr.options.positionClass = "toast-top-center";
                toastr.warning('@Model.ErrorMessage', '@Model.Error').css("width", "600px");
                $('#next').attr('disabled', true);
            }

            const modelStateValid = '@ViewData.ModelState.IsValid';
            if (modelStateValid && modelStateValid.toLowerCase() === "false") {
                $("#nextSpinner").hide();
                $("#next").prop("disabled", false);
                $("#previous").show();
            }

            // hook into the form submission
            $("#myForm").submit(function(e) {
                if ($("#myForm").valid() === false) {
                    e.preventDefault(e);
                } else {
                    $("#nextSpinner").show();
                    $("#next").prop("disabled", true);
                    $("#previous").hide();

                    toastr.options.timeOut = 0;
                    toastr.options.extendedTimeOut = 0;
                    toastr.options.closeButton = false;
                    toastr.options.positionClass = "toast-top-center";
                    toastr.options.preventDuplicates = true;

                    const title = "Creating the Azure resources...";
                    const msg = "<br />" +
                        "This step may take a little while to complete as we're creating or configuring the resources below." +
                        "<br /><br />" +
                        "<i class=\"fa fa-spinner fa-spin\" title=\"In progress\"></i> Key Vault<br />" +
                        "<i class=\"fa fa-spinner fa-spin\" title=\"In progress\"></i> Azure Storage<br />" +
                        "<i class=\"fa fa-spinner fa-spin\" title=\"In progress\"></i> Azure Batch<br />" +
                        "<i class=\"fa fa-spinner fa-spin\" title=\"In progress\"></i> Virtual Networking<br />" +
                        "<i class=\"fa fa-spinner fa-spin\" title=\"In progress\"></i> Application Insights" +
                        "<br />";

                    toastr.info(msg, title).css("width", "600px");
                }
            });
        });
    </script>
}

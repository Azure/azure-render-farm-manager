@model WebApp.Models.Reporting.EnvironmentCost

@{
    var id = Guid.NewGuid().ToString();
    var usage = Model.Cost;
    var period = usage?.Period;
}

<div class="chart-container" style="width: 100%">
    <div id="CostSpinner-@id" class="chart-loading">
        <i class="fa fa-spinner fa-2x fa-spin"></i>
    </div>
    <canvas id="graph-@id"></canvas>
</div>

<script type="text/javascript">
    var ctx = document.getElementById("graph-@id").getContext('2d');

    var datasets = [];
    var labels = [];

    Date.prototype.addDays = function(days) {
        var date = new Date(this.valueOf());
        date.setDate(date.getDate() + days);
        return date;
    }

    Number.prototype.pad = function () {
        var size = 2;
        return new Array(size).concat([Math.abs(this)]).join('0').slice(-size);
    }

    Date.prototype.toYearMonthDayString = function () {
        var date = new Date(this.valueOf());
        var year = `20${date.getUTCFullYear().pad()}`;
        var month = `${(date.getUTCMonth() + 1).pad()}`;
        var day = `${date.getUTCDate().pad()}`;
        return `${year}${month}${day}`;
    }

var cfg = {
    type: 'bar',
    data: {
        labels: labels,
        datasets: datasets
    },
    options: {
        legend: {
            position: 'bottom'
        },
        scales: {
            xAxes: [{
                stacked: true,
                type: 'time',
                time: {
                    unit: 'day',
                    //min: '@period?.From.ToString("yyyyMMdd")',
                    //max: '@period?.To.ToString("yyyyMMdd")'
                }
            }],
            yAxes: [{
                stacked: true,
                scaleLabel: {
                    display: true,
                    labelString: 'Cost (@Model.Cost?.Currency)'
                },
                ticks: {
                    precision: 2,
                    beginAtZero: true
                }
            }]
        },
        plugins: {
            colorschemes: {
                scheme: 'brewer.Paired12'
            }
        }
    }
};

    

            $(document).ready(function () {

            $("#CostSpinner-@id").css({ display: "block" });
            $.get('/api/environments/@Model.EnvironmentId/costs',
                function (result) {
                    console.log('Costs', result);

                    /**
                     * {
                           cost: {
                                categorized: {
                                    bandwidth: {2019-11-02T00:00:00+00:00: 0.00006, 2019-11-03T00:00:00+00:00: 0.000108, …}
                                    key vault: {2019-11-02T00:00:00+00:00: 0.000004, 2019-11-03T00:00:00+00:00: 0.000053, …}
                                    log analytics: {2019-11-02T00:00:00+00:00: 0, 2019-11-03T00:00:00+00:00: 0, …}
                                    storage: {2019-11-02T00:00:00+00:00: 1.020358, …}
                                    virtual machines: {2019-11-02T00:00:00+00:00: 1.54224, …}
                                    virtual machines licenses: {2019-11-02T00:00:00+00:00: 0, …}
                                },
                                currency: "USD",
                                period: {from: "2019-11-01T00:00:00+00:00", to: "2019-11-30T23:59:59+00:00"},
                            },
                            environmentId: "MyEnv"
                        }
                     */

                    if (result && result.cost && result.cost.categorized) {
                        var dataset = Object.keys(result.cost.categorized).map((categoryName) => {
                            return {
                                label: categoryName,
                                data: Object.keys(result.cost.categorized[categoryName]).map((timestamp) => result.cost.categorized[categoryName][timestamp]),
                            };
                        });

                        if (dataset) {
                            datasets.push(dataset);
                        }

                        var from = new Date(result.cost.period.from);
                        var to = new Date(result.cost.period.to);

                        for (var day = new Date(result.cost.period.from); day <= new Date(result.cost.period.to); day = day.addDays(1))
                        {
                            labels.push(day.toYearMonthDayString());
                        }

                        cfg.options.scales.xAxes[0].time.min = from.toYearMonthDayString();
                        cfg.options.scales.xAxes[0].time.max = to.toYearMonthDayString();
                        cfg.options.scales.yAxes[0].scaleLabel.labelString = result.cost.currency;
                    }

                    $("#CostSpinner-@id").css({ display: "none" });

                    console.log('cfg', cfg);

                    var chart = new Chart(ctx, cfg);
                });
        });

</script>
@using WebApp.Models.Reporting;
@model WebApp.Models.Environments.Details.ViewEnvironmentModel;
@{
    ViewBag.Title = Model.EnvironmentName;
}

@section Breadcrumb
{
    <a asp-controller="Environments" asp-action="Index">Environments</a> &gt;
    <a asp-controller="Environments" asp-action="Details" asp-route-envId="@Model.EnvironmentName">@Model.EnvironmentName</a> &gt;
    <span>Overview</span>
}

<script src="~/js/chartjs-plugin-colorschemes.min.js" asp-append-version="true"></script>

<h2>@Model.EnvironmentName - details</h2>
<p>View the details of a pre-configured render farm environment.</p>

@await Html.PartialAsync("Menu/EnvironmentMainMenu", Model, new ViewDataDictionary(ViewData) { { "Step", "env" } })
@await Html.PartialAsync("Menu/EnvironmentSubMenu", Model, new ViewDataDictionary(ViewData)
{
    { "Step", 1 },
    { "Type", "view" }
})

<div class="page-header">

    <div class="form-section">
        <div class="section-title">
            <span class="step-index">1</span>
            <div class="step-header">
                <h1>Environment</h1>
                <p></p>
            </div>
        </div>
        <div class="section-wrapper">
            <div class="section-bar"></div>
            <div class="section-content">
                <div class="form-element">
                    <label asp-for="EnvironmentName">Environment name</label>
                    <input asp-for="EnvironmentName" readonly="readonly" />
                </div>
                <div class="form-element">
                    <label asp-for="RenderManager">Render Manager</label>
                    <input asp-for="RenderManager" readonly="readonly" />
                </div>
            </div>
        </div>
    </div>

    <div class="form-section">
        <div class="section-title">
            <span class="step-index">2</span>
            <div class="step-header">
                <h1>Compute Usage</h1>
                <p></p>
            </div>
        </div>
        <div class="section-wrapper">
            <div class="section-bar"></div>
            <div class="section-content">
                <div class="form-element">
                    <label>Time Range</label>
                    <select id="ChartRange" class="half">
                        <option value="1">Last Day</option>
                        <option value="3" selected>Last 3 Days</option>
                        <option value="7">Last Week</option>
                        <option value="14">Last 2 Weeks</option>
                    </select>
                </div>
                <div id="canvas-container">
                    <div id="UsageSpinner" class="chart-loading">
                        <i class="fa fa-spinner fa-2x fa-spin"></i>
                    </div>
                    <canvas id="env-usage"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="form-section">
        <div class="section-title">
            <span class="step-index">3</span>
            <div class="step-header">
                <h3>Monthly Cost</h3>
                <p>For more costs please see the <a href="@Url.Action("Index", "Reporting")">reporting page</a>.</p>
            </div>
        </div>
        <div class="section-wrapper">
            <div class="section-bar"></div>
            <div class="section-content">
                @{ await Html.RenderPartialAsync("Cost/Chart", new EnvironmentCost(@Model.EnvironmentName, null)); }
            </div>
        </div>
    </div>
</div>

<div class="form-footer">
    <div class="button-bar">
        <a class="button" asp-controller="Environments" asp-action="Step2" asp-route-envId="@Model.EnvironmentName">Edit Environment <i class="fa fa-edit"></i></a>
        <a class="button" asp-controller="Environments" asp-action="Delete" asp-route-envId="@Model.EnvironmentName">Delete Environment <i class="fa fa-trash"></i></a>
    </div>
</div>

<p>&nbsp;</p>

@section Scripts
{
    <script>
        var poolUsageResults = null;

        function getAllData() {
            return @Html.Raw(Json.Serialize(Model.PoolUsageResults));
        }

        function updateChart(days) {
            if (poolUsageResults) {
                var envName = "@Model.EnvironmentName";
                var config = getTimeChartForEnvironment(envName, poolUsageResults);
                var now = new Date();
                var min = new Date();
                min.setDate(min.getDate() - days);
                config.options.scales.xAxes[0].time.min = min;
                config.options.scales.xAxes[0].time.max = now;
                var ctx = document.getElementById('env-usage').getContext('2d');
                ctx.canvas.parentNode.style.height = '300px';
                ctx.canvas.parentNode.style.width = '680px';
                window.chart = new Chart(ctx, config);
            }
        }

        $(document).ready(function () {

            $("#ChartRange").change(function(){
                var days = $(this).children("option:selected").val();
                updateChart(days);
            });

            $("#UsageSpinner").css({ display: "block" });
            $.get('/api/environments/@Model.EnvironmentName/poolUsage',
                function (poolUsage) {
                    poolUsageResults = poolUsage;
                    var days = $(this).children("option:selected").val();
                    $("#UsageSpinner").css({ display: "none" });
                    updateChart(days);
                });

            // Show a warning if the sub is locked
            var deleteErrors = '@Model.DeleteErrors';
            if (deleteErrors !== '') {
                toastr.options.timeOut = 0;
                toastr.options.extendedTimeOut = 0;
                toastr.options.closeButton = true;
                toastr.options.positionClass = "toast-top-center";

                var title = 'An error occured deleting the environment';
                var message = '@Model.DeleteErrors';

                toastr.warning(message, title).css("width", "600px");
            }

            $("#ChartRange").change();
        });
    </script>
}

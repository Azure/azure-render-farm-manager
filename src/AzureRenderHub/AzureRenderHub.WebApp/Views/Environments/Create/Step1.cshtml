@model WebApp.Models.Environments.Create.AddEnvironmentStep1Model;
@{
    ViewBag.Title = "Add Environment";
}

@section Breadcrumb
{
    <a asp-controller="Environments" asp-action="Index">Environments</a> &gt;
    <span>New</span>
}

@await Html.PartialAsync("Environments/Create/CreateFormHeaderPartial")
@using (Html.BeginForm("Step1", "Environments", null, FormMethod.Post, true, new {id = "myForm"}))
{
    @await Html.PartialAsync("Menu/EnvironmentSubMenu", Model, new ViewDataDictionary(ViewData)
    {
        {"Step", 1},
        {"Wizard", "true"}
    })

    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.OriginalName)
    @Html.HiddenFor(model => model.EditMode)

    <div asp-validation-summary="ModelOnly" class=""></div>
    <div class="form-section">
        <div class="section-title">
            <span class="step-index">1</span>
            <div class="step-header">
                <h3>General details</h3>
                <p>Set up the basic information about the render farm environment</p>
            </div>
        </div>
        <div class="section-wrapper">
            <div class="section-bar"></div>
            <div class="section-content">
                <div class="form-element">
                    <label asp-for="EnvironmentName">Environment name</label>
                    <input asp-for="EnvironmentName" class="disable-read-only"/>
                    <span asp-validation-for="EnvironmentName" class=""></span>
                </div>
                <div class="form-element">
                    <label asp-for="RenderManager">Render manager</label>
                    <select asp-for="RenderManager" name="RenderManager">
                        <option value="Qube70" selected>Qube 7.0</option>
                        <option value="Qube610">Qube 6.10</option>
                        <option value="Deadline">Deadline 10</option>
                        <option value="OpenCue">OpenCue</option>
                        <option value="Tractor2">Tractor 2.x</option>
                        <option value="BYOS">Bring Your Own Scheduler</option>
                    </select>
                    <span asp-validation-for="RenderManager" class=""></span>
                </div>
                <div class="form-element">
                    <label asp-for="SubscriptionId">Subscription ID</label>
                    <div id="SubSpinner" class="async-select">
                        <select id="SubscriptionId" asp-for="SubscriptionId">
                            <option disabled selected> -- Loading Subscriptions -- </option>
                        </select>
                        <i class="fa fa-spinner fa-spin"></i>
                    </div>
                    <span asp-validation-for="SubscriptionId" class=""></span>
                    @Html.HiddenFor(model => model.SubscriptionId)
                </div>
                <div class="form-element">
                    <label asp-for="LocationName">Location</label>
                    <div id="LocationSpinner" class="async-select">
                        <select id="LocationName" asp-for="LocationName">
                            <option disabled selected> -- Loading Locations -- </option>
                        </select>
                        <i class="fa fa-spinner fa-spin"></i>
                    </div>
                    <span asp-validation-for="LocationName" class=""></span>
                    @Html.HiddenFor(model => model.LocationName)
                </div>
            </div>
        </div>
    </div>
    <div class="form-footer">
        <div class="summary"></div>
        <div class="button-bar">
            <button id="next" type="submit">Next : Resources <i id="nextSpinner" class="fa fa-spinner fa-spin" style="display: none;"></i></button>
        </div>
    </div>
}

@section Scripts
{
    <script>
        $(document).ready(function () {
            $("#SubSpinner").addClass("loading");
            $("#LocationSpinner").addClass("loading");
            $.get("/api/subscriptions",
                function (subscriptions) {
                    var selected = "";
                    var dropDownItems = $.map(subscriptions,
                        function (subscription) {
                            if (subscription.state !== "Enabled") {
                                return '';
                            }

                            if (subscription.subscriptionId === "@Model.SubscriptionId") {
                                selected = "selected";
                            }

                            return '<option ' + selected + ' value="' + subscription.subscriptionId + '">' + subscription.displayName + ' (' + subscription.subscriptionId + ')</option>';
                        });

                    if (!selected) {
                        dropDownItems.splice(0, 0, "<option value=''>Please select the subscription ...</option>");
                    }

                    $("#SubscriptionId").empty();
                    $("#SubscriptionId").append(dropDownItems);
                    $("#SubscriptionId").val("@Model.SubscriptionId").change();
                    $("#SubSpinner").removeClass("loading");
                    if (!selected) {
                        $("#SubscriptionId").attr("selectedIndex", 1);
                    }

                    if ('@Model.SubscriptionIdLocked' === 'True') {
                        $("#SubscriptionId").prop("disabled", true);
                    }
                });

            $.get("/api/subscriptions/@Model.SubscriptionId/locations",
                function (locations) {
                    var foundSelection = false;
                    var dropDownItems = $.map(locations,
                        function (location) {
                            var selected = "";
                            if (location.name === "@Model.LocationName") {
                                foundSelection = true;
                                selected = "selected";
                            }
                            return '<option ' + selected + ' value="' + location.name + '">' + location.displayName + '</option>';
                        });

                    dropDownItems.splice(0, 0, "<option value=''>Please select the location ...</option>");

                    $("#LocationName").empty();
                    $("#LocationName").append(dropDownItems);
                    if (!foundSelection) {
                        $("#LocationName").val($("#LocationName option:first").val()).change();
                    }
                    $("#LocationSpinner").removeClass("loading");

                    if ('@Model.SubscriptionIdLocked' === 'True') {
                        $("#LocationName").prop("disabled", true);
                    }
                });

            if ('@Model.SubscriptionIdLocked' === 'True') {
                $('#EnvironmentName').attr('readonly', true);
            }

            var modelStateValid = '@ViewData.ModelState.IsValid';
            if (modelStateValid && modelStateValid.toLowerCase() === "false") {
                $("#nextSpinner").hide();
                $("#next").prop("disabled", false);
            }

            // Show a warning if the sub is locked
            if ('@Model.SubscriptionIdLocked' === 'True') {
                toastr.options.timeOut = 0;
                toastr.options.extendedTimeOut = 0;
                toastr.options.closeButton = true;
                toastr.options.positionClass = "toast-top-center";

                var title = "The environment name, subscription and location cannot be changed";
                var message = "Please note that the name, subscription and location cannot be changed once resources have been created.  " +
                    "If you need to change any of these please delete this environment and create a new one.";

                toastr.info(message, title).css("width", "600px");
            }

            // hook into the form submission
            $("#myForm").submit(function (e) {
                if ($("#myForm").valid() === false) {
                    e.preventDefault(e);
                } else {
                    $("#nextSpinner").show();
                    $("#next").prop("disabled", true);
                }
            });
        });
    </script>
}
